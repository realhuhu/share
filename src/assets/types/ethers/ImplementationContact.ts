/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Types {
  export type CategoryStruct = {
    category_address: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    num: PromiseOrValue<BigNumberish>;
  };

  export type CategoryStructOutput = [string, string, BigNumber] & {
    category_address: string;
    name: string;
    num: BigNumber;
  };

  export type FileBriefInfoStruct = {
    file_address: PromiseOrValue<string>;
    category_address: PromiseOrValue<string>;
    is_buy: PromiseOrValue<boolean>;
    name: PromiseOrValue<string>;
    title: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    cover: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    up_num: PromiseOrValue<BigNumberish>;
    down_num: PromiseOrValue<BigNumberish>;
    buyer_num: PromiseOrValue<BigNumberish>;
    comment_num: PromiseOrValue<BigNumberish>;
    up_and_down: PromiseOrValue<BigNumberish>;
    upload_timestamp: PromiseOrValue<BigNumberish>;
  };

  export type FileBriefInfoStructOutput = [
    string,
    string,
    boolean,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    file_address: string;
    category_address: string;
    is_buy: boolean;
    name: string;
    title: string;
    owner: string;
    description: string;
    cover: string;
    price: BigNumber;
    up_num: BigNumber;
    down_num: BigNumber;
    buyer_num: BigNumber;
    comment_num: BigNumber;
    up_and_down: BigNumber;
    upload_timestamp: BigNumber;
  };

  export type FileDetailInfoStruct = {
    owner: PromiseOrValue<string>;
    file_address: PromiseOrValue<string>;
    category_address: PromiseOrValue<string>;
    is_buy: PromiseOrValue<boolean>;
    name: PromiseOrValue<string>;
    title: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    ipfs_address: PromiseOrValue<string>;
    images: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ];
    price: PromiseOrValue<BigNumberish>;
    up_num: PromiseOrValue<BigNumberish>;
    down_num: PromiseOrValue<BigNumberish>;
    buyer_num: PromiseOrValue<BigNumberish>;
    comment_num: PromiseOrValue<BigNumberish>;
    up_and_down: PromiseOrValue<BigNumberish>;
    upload_timestamp: PromiseOrValue<BigNumberish>;
  };

  export type FileDetailInfoStructOutput = [
    string,
    string,
    string,
    boolean,
    string,
    string,
    string,
    string,
    [string, string, string],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    owner: string;
    file_address: string;
    category_address: string;
    is_buy: boolean;
    name: string;
    title: string;
    description: string;
    ipfs_address: string;
    images: [string, string, string];
    price: BigNumber;
    up_num: BigNumber;
    down_num: BigNumber;
    buyer_num: BigNumber;
    comment_num: BigNumber;
    up_and_down: BigNumber;
    upload_timestamp: BigNumber;
  };

  export type UserSimpleInfoStruct = {
    major: PromiseOrValue<string>;
    avatar: PromiseOrValue<string>;
    nickname: PromiseOrValue<string>;
    signature: PromiseOrValue<string>;
    heart: PromiseOrValue<BigNumberish>;
    medal_num: PromiseOrValue<BigNumberish>;
    experience: PromiseOrValue<BigNumberish>;
    follower_num: PromiseOrValue<BigNumberish>;
    uploaded_file_num: PromiseOrValue<BigNumberish>;
  };

  export type UserSimpleInfoStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    major: string;
    avatar: string;
    nickname: string;
    signature: string;
    heart: BigNumber;
    medal_num: BigNumber;
    experience: BigNumber;
    follower_num: BigNumber;
    uploaded_file_num: BigNumber;
  };

  export type UserSelfInfoStruct = {
    major: PromiseOrValue<string>;
    avatar: PromiseOrValue<string>;
    nickname: PromiseOrValue<string>;
    signature: PromiseOrValue<string>;
    ID: PromiseOrValue<BigNumberish>;
    coins: PromiseOrValue<BigNumberish>;
    heart: PromiseOrValue<BigNumberish>;
    experience: PromiseOrValue<BigNumberish>;
    follower_num: PromiseOrValue<BigNumberish>;
    following_num: PromiseOrValue<BigNumberish>;
    login_timestamp: PromiseOrValue<BigNumberish>;
    uploaded_file_num: PromiseOrValue<BigNumberish>;
  };

  export type UserSelfInfoStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    major: string;
    avatar: string;
    nickname: string;
    signature: string;
    ID: BigNumber;
    coins: BigNumber;
    heart: BigNumber;
    experience: BigNumber;
    follower_num: BigNumber;
    following_num: BigNumber;
    login_timestamp: BigNumber;
    uploaded_file_num: BigNumber;
  };
}

export interface ImplementationContactInterface extends utils.Interface {
  functions: {
    "RewardContract_init()": FunctionFragment;
    "addCategory(string)": FunctionFragment;
    "admin()": FunctionFragment;
    "getCategorySlice(address)": FunctionFragment;
    "getFileBriefInfos(address,address,uint256,bool)": FunctionFragment;
    "getFileDetailInfo(address)": FunctionFragment;
    "getOtherSimpleInfo(address)": FunctionFragment;
    "getSelfFileBriefInfos(address,bool)": FunctionFragment;
    "getSelfInfo()": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "register(string)": FunctionFragment;
    "renounceAdmin()": FunctionFragment;
    "transferAdmin(address)": FunctionFragment;
    "updateAvatar(string)": FunctionFragment;
    "updateNickname(string)": FunctionFragment;
    "updateSignature(string)": FunctionFragment;
    "uploadFile(string,string,string,string,address,string[3],uint256)": FunctionFragment;
    "init()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "RewardContract_init"
      | "addCategory"
      | "admin"
      | "getCategorySlice"
      | "getFileBriefInfos"
      | "getFileDetailInfo"
      | "getOtherSimpleInfo"
      | "getSelfFileBriefInfos"
      | "getSelfInfo"
      | "isRegistered"
      | "register"
      | "renounceAdmin"
      | "transferAdmin"
      | "updateAvatar"
      | "updateNickname"
      | "updateSignature"
      | "uploadFile"
      | "init"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "RewardContract_init",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCategory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCategorySlice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFileBriefInfos",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFileDetailInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOtherSimpleInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSelfFileBriefInfos",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSelfInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAvatar",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNickname",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSignature",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uploadFile",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "RewardContract_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCategorySlice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFileBriefInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFileDetailInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOtherSimpleInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSelfFileBriefInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSelfInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAvatar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNickname",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uploadFile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;

  events: {
    "AdminTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminTransferred"): EventFragment;
}

export interface AdminTransferredEventObject {
  old_admin: string;
  new_admin: string;
}
export type AdminTransferredEvent = TypedEvent<
  [string, string],
  AdminTransferredEventObject
>;

export type AdminTransferredEventFilter =
  TypedEventFilter<AdminTransferredEvent>;

export interface ImplementationContact extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ImplementationContactInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RewardContract_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addCategory(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    getCategorySlice(
      cursor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [Types.CategoryStructOutput[], string, boolean] & {
        category_slice: Types.CategoryStructOutput[];
        next: string;
        finished: boolean;
      }
    >;

    getFileBriefInfos(
      cursor: PromiseOrValue<string>,
      category_address: PromiseOrValue<string>,
      order: PromiseOrValue<BigNumberish>,
      reverse: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [Types.FileBriefInfoStructOutput[], string, boolean] & {
        file_infos: Types.FileBriefInfoStructOutput[];
        next: string;
        finished: boolean;
      }
    >;

    getFileDetailInfo(
      file_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [Types.FileDetailInfoStructOutput] & {
        detail_info: Types.FileDetailInfoStructOutput;
      }
    >;

    getOtherSimpleInfo(
      user_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [Types.UserSimpleInfoStructOutput] & {
        simple_info: Types.UserSimpleInfoStructOutput;
      }
    >;

    getSelfFileBriefInfos(
      cursor: PromiseOrValue<string>,
      reverse: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [Types.FileBriefInfoStructOutput[], string, boolean] & {
        file_infos: Types.FileBriefInfoStructOutput[];
        next: string;
        finished: boolean;
      }
    >;

    getSelfInfo(
      overrides?: CallOverrides
    ): Promise<
      [Types.UserSelfInfoStructOutput] & {
        self_info: Types.UserSelfInfoStructOutput;
      }
    >;

    isRegistered(
      user_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { is_registered: boolean }>;

    register(
      nickname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferAdmin(
      new_admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAvatar(
      avatar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateNickname(
      nickname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSignature(
      signature: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uploadFile(
      ipfs_address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      category_address: PromiseOrValue<string>,
      images: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  RewardContract_init(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addCategory(
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  getCategorySlice(
    cursor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [Types.CategoryStructOutput[], string, boolean] & {
      category_slice: Types.CategoryStructOutput[];
      next: string;
      finished: boolean;
    }
  >;

  getFileBriefInfos(
    cursor: PromiseOrValue<string>,
    category_address: PromiseOrValue<string>,
    order: PromiseOrValue<BigNumberish>,
    reverse: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<
    [Types.FileBriefInfoStructOutput[], string, boolean] & {
      file_infos: Types.FileBriefInfoStructOutput[];
      next: string;
      finished: boolean;
    }
  >;

  getFileDetailInfo(
    file_address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Types.FileDetailInfoStructOutput>;

  getOtherSimpleInfo(
    user_address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Types.UserSimpleInfoStructOutput>;

  getSelfFileBriefInfos(
    cursor: PromiseOrValue<string>,
    reverse: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<
    [Types.FileBriefInfoStructOutput[], string, boolean] & {
      file_infos: Types.FileBriefInfoStructOutput[];
      next: string;
      finished: boolean;
    }
  >;

  getSelfInfo(
    overrides?: CallOverrides
  ): Promise<Types.UserSelfInfoStructOutput>;

  isRegistered(
    user_address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  register(
    nickname: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceAdmin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferAdmin(
    new_admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAvatar(
    avatar: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateNickname(
    nickname: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSignature(
    signature: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uploadFile(
    ipfs_address: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    title: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    category_address: PromiseOrValue<string>,
    images: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ],
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  init(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    RewardContract_init(overrides?: CallOverrides): Promise<void>;

    addCategory(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    getCategorySlice(
      cursor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [Types.CategoryStructOutput[], string, boolean] & {
        category_slice: Types.CategoryStructOutput[];
        next: string;
        finished: boolean;
      }
    >;

    getFileBriefInfos(
      cursor: PromiseOrValue<string>,
      category_address: PromiseOrValue<string>,
      order: PromiseOrValue<BigNumberish>,
      reverse: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [Types.FileBriefInfoStructOutput[], string, boolean] & {
        file_infos: Types.FileBriefInfoStructOutput[];
        next: string;
        finished: boolean;
      }
    >;

    getFileDetailInfo(
      file_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Types.FileDetailInfoStructOutput>;

    getOtherSimpleInfo(
      user_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Types.UserSimpleInfoStructOutput>;

    getSelfFileBriefInfos(
      cursor: PromiseOrValue<string>,
      reverse: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [Types.FileBriefInfoStructOutput[], string, boolean] & {
        file_infos: Types.FileBriefInfoStructOutput[];
        next: string;
        finished: boolean;
      }
    >;

    getSelfInfo(
      overrides?: CallOverrides
    ): Promise<Types.UserSelfInfoStructOutput>;

    isRegistered(
      user_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    register(
      nickname: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceAdmin(overrides?: CallOverrides): Promise<void>;

    transferAdmin(
      new_admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAvatar(
      avatar: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNickname(
      nickname: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSignature(
      signature: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uploadFile(
      ipfs_address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      category_address: PromiseOrValue<string>,
      images: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    init(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminTransferred(address,address)"(
      old_admin?: PromiseOrValue<string> | null,
      new_admin?: PromiseOrValue<string> | null
    ): AdminTransferredEventFilter;
    AdminTransferred(
      old_admin?: PromiseOrValue<string> | null,
      new_admin?: PromiseOrValue<string> | null
    ): AdminTransferredEventFilter;
  };

  estimateGas: {
    RewardContract_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addCategory(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    getCategorySlice(
      cursor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFileBriefInfos(
      cursor: PromiseOrValue<string>,
      category_address: PromiseOrValue<string>,
      order: PromiseOrValue<BigNumberish>,
      reverse: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFileDetailInfo(
      file_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOtherSimpleInfo(
      user_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSelfFileBriefInfos(
      cursor: PromiseOrValue<string>,
      reverse: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSelfInfo(overrides?: CallOverrides): Promise<BigNumber>;

    isRegistered(
      user_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      nickname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferAdmin(
      new_admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAvatar(
      avatar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateNickname(
      nickname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSignature(
      signature: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uploadFile(
      ipfs_address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      category_address: PromiseOrValue<string>,
      images: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RewardContract_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addCategory(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCategorySlice(
      cursor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFileBriefInfos(
      cursor: PromiseOrValue<string>,
      category_address: PromiseOrValue<string>,
      order: PromiseOrValue<BigNumberish>,
      reverse: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFileDetailInfo(
      file_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOtherSimpleInfo(
      user_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSelfFileBriefInfos(
      cursor: PromiseOrValue<string>,
      reverse: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSelfInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRegistered(
      user_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      nickname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferAdmin(
      new_admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAvatar(
      avatar: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateNickname(
      nickname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSignature(
      signature: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uploadFile(
      ipfs_address: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      category_address: PromiseOrValue<string>,
      images: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

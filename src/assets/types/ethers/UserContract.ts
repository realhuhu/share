/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace UserContract {
  export type UserSelfInfoStruct = {
    avatar: PromiseOrValue<string>;
    nickname: PromiseOrValue<string>;
    signature: PromiseOrValue<string>;
    login_timestamp: PromiseOrValue<BigNumberish>;
    following_num: PromiseOrValue<BigNumberish>;
    follower_num: PromiseOrValue<BigNumberish>;
    ID: PromiseOrValue<BigNumberish>;
    major: PromiseOrValue<string>;
    heart: PromiseOrValue<BigNumberish>;
  };

  export type UserSelfInfoStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    avatar: string;
    nickname: string;
    signature: string;
    login_timestamp: BigNumber;
    following_num: BigNumber;
    follower_num: BigNumber;
    ID: BigNumber;
    major: string;
    heart: BigNumber;
  };

  export type UserBriefInfoStruct = {
    avatar: PromiseOrValue<string>;
    nickname: PromiseOrValue<string>;
    signature: PromiseOrValue<string>;
    login_timestamp: PromiseOrValue<BigNumberish>;
    following_num: PromiseOrValue<BigNumberish>;
    follower_num: PromiseOrValue<BigNumberish>;
    heart: PromiseOrValue<BigNumberish>;
  };

  export type UserBriefInfoStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    avatar: string;
    nickname: string;
    signature: string;
    login_timestamp: BigNumber;
    following_num: BigNumber;
    follower_num: BigNumber;
    heart: BigNumber;
  };

  export type UserSimpleInfoStruct = {
    avatar: PromiseOrValue<string>;
    nickname: PromiseOrValue<string>;
  };

  export type UserSimpleInfoStructOutput = [string, string] & {
    avatar: string;
    nickname: string;
  };
}

export interface UserContractInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "register(string)": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "getSelfInfo()": FunctionFragment;
    "getUserInfo(address)": FunctionFragment;
    "getFollowings(address)": FunctionFragment;
    "getFollowers(address)": FunctionFragment;
    "setFollow(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "register"
      | "isRegistered"
      | "getSelfInfo"
      | "getUserInfo"
      | "getFollowings"
      | "getFollowers"
      | "setFollow"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSelfInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFollowings",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFollowers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFollow",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSelfInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFollowings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFollowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFollow", data: BytesLike): Result;

  events: {};
}

export interface UserContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UserContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    register(
      nickname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isRegistered(
      user_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { is_registered: boolean }>;

    getSelfInfo(
      overrides?: CallOverrides
    ): Promise<
      [UserContract.UserSelfInfoStructOutput] & {
        self_info: UserContract.UserSelfInfoStructOutput;
      }
    >;

    getUserInfo(
      user_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [UserContract.UserBriefInfoStructOutput] & {
        user_info: UserContract.UserBriefInfoStructOutput;
      }
    >;

    getFollowings(
      cursor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [UserContract.UserSimpleInfoStructOutput[], BigNumber] & {
        followings_info: UserContract.UserSimpleInfoStructOutput[];
        length: BigNumber;
      }
    >;

    getFollowers(
      cursor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [UserContract.UserSimpleInfoStructOutput[], BigNumber] & {
        followers_info: UserContract.UserSimpleInfoStructOutput[];
        length: BigNumber;
      }
    >;

    setFollow(
      target_user: PromiseOrValue<string>,
      is_follow: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  register(
    nickname: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isRegistered(
    user_address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getSelfInfo(
    overrides?: CallOverrides
  ): Promise<UserContract.UserSelfInfoStructOutput>;

  getUserInfo(
    user_address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<UserContract.UserBriefInfoStructOutput>;

  getFollowings(
    cursor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [UserContract.UserSimpleInfoStructOutput[], BigNumber] & {
      followings_info: UserContract.UserSimpleInfoStructOutput[];
      length: BigNumber;
    }
  >;

  getFollowers(
    cursor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [UserContract.UserSimpleInfoStructOutput[], BigNumber] & {
      followers_info: UserContract.UserSimpleInfoStructOutput[];
      length: BigNumber;
    }
  >;

  setFollow(
    target_user: PromiseOrValue<string>,
    is_follow: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    register(
      nickname: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<UserContract.UserSelfInfoStructOutput>;

    isRegistered(
      user_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getSelfInfo(
      overrides?: CallOverrides
    ): Promise<UserContract.UserSelfInfoStructOutput>;

    getUserInfo(
      user_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<UserContract.UserBriefInfoStructOutput>;

    getFollowings(
      cursor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [UserContract.UserSimpleInfoStructOutput[], BigNumber] & {
        followings_info: UserContract.UserSimpleInfoStructOutput[];
        length: BigNumber;
      }
    >;

    getFollowers(
      cursor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [UserContract.UserSimpleInfoStructOutput[], BigNumber] & {
        followers_info: UserContract.UserSimpleInfoStructOutput[];
        length: BigNumber;
      }
    >;

    setFollow(
      target_user: PromiseOrValue<string>,
      is_follow: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      nickname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isRegistered(
      user_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSelfInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getUserInfo(
      user_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFollowings(
      cursor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFollowers(
      cursor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFollow(
      target_user: PromiseOrValue<string>,
      is_follow: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      nickname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isRegistered(
      user_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSelfInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserInfo(
      user_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFollowings(
      cursor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFollowers(
      cursor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFollow(
      target_user: PromiseOrValue<string>,
      is_follow: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

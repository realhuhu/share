/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface FileInterfaceContract
  extends Truffle.Contract<FileInterfaceInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<FileInterfaceInstance>;
}

type AllEvents = never;

export interface FileInterfaceInstance extends Truffle.ContractInstance {
  addCategory: {
    (name: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(name: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getCategorySlice(
    cursor: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: { category_address: string; name: string; num: BN }[];
    1: string;
  }>;

  uploadFile: {
    (
      ipfs_address: string,
      name: string,
      title: string,
      description: string,
      category: string,
      images: string[],
      price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      ipfs_address: string,
      name: string,
      title: string,
      description: string,
      category: string,
      images: string[],
      price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      ipfs_address: string,
      name: string,
      title: string,
      description: string,
      category: string,
      images: string[],
      price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      ipfs_address: string,
      name: string,
      title: string,
      description: string,
      category: string,
      images: string[],
      price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getSelfFileBriefInfos(
    cursor: string,
    reverse: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: {
      category: string;
      file_address: string;
      is_buy: boolean;
      name: string;
      title: string;
      owner: string;
      description: string;
      cover: string;
      price: BN;
      up_num: BN;
      down_num: BN;
      buyer_num: BN;
      comment_num: BN;
      up_and_down: BN;
      upload_timestamp: BN;
    }[];
    1: string;
  }>;

  getFileBriefInfos(
    cursor: string,
    category: string,
    order: number | BN | string,
    reverse: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: {
      category: string;
      file_address: string;
      is_buy: boolean;
      name: string;
      title: string;
      owner: string;
      description: string;
      cover: string;
      price: BN;
      up_num: BN;
      down_num: BN;
      buyer_num: BN;
      comment_num: BN;
      up_and_down: BN;
      upload_timestamp: BN;
    }[];
    1: string;
    2: boolean;
  }>;

  getFileDetailInfo(
    file_address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    owner: string;
    category: string;
    file_address: string;
    is_buy: boolean;
    name: string;
    title: string;
    description: string;
    ipfs_address: string;
    images: string[];
    price: BN;
    up_num: BN;
    down_num: BN;
    buyer_num: BN;
    comment_num: BN;
    up_and_down: BN;
    upload_timestamp: BN;
  }>;

  methods: {
    addCategory: {
      (name: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(name: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        name: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        name: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getCategorySlice(
      cursor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: { category_address: string; name: string; num: BN }[];
      1: string;
    }>;

    uploadFile: {
      (
        ipfs_address: string,
        name: string,
        title: string,
        description: string,
        category: string,
        images: string[],
        price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        ipfs_address: string,
        name: string,
        title: string,
        description: string,
        category: string,
        images: string[],
        price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        ipfs_address: string,
        name: string,
        title: string,
        description: string,
        category: string,
        images: string[],
        price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        ipfs_address: string,
        name: string,
        title: string,
        description: string,
        category: string,
        images: string[],
        price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getSelfFileBriefInfos(
      cursor: string,
      reverse: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: {
        category: string;
        file_address: string;
        is_buy: boolean;
        name: string;
        title: string;
        owner: string;
        description: string;
        cover: string;
        price: BN;
        up_num: BN;
        down_num: BN;
        buyer_num: BN;
        comment_num: BN;
        up_and_down: BN;
        upload_timestamp: BN;
      }[];
      1: string;
    }>;

    getFileBriefInfos(
      cursor: string,
      category: string,
      order: number | BN | string,
      reverse: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: {
        category: string;
        file_address: string;
        is_buy: boolean;
        name: string;
        title: string;
        owner: string;
        description: string;
        cover: string;
        price: BN;
        up_num: BN;
        down_num: BN;
        buyer_num: BN;
        comment_num: BN;
        up_and_down: BN;
        upload_timestamp: BN;
      }[];
      1: string;
      2: boolean;
    }>;

    getFileDetailInfo(
      file_address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      owner: string;
      category: string;
      file_address: string;
      is_buy: boolean;
      name: string;
      title: string;
      description: string;
      ipfs_address: string;
      images: string[];
      price: BN;
      up_num: BN;
      down_num: BN;
      buyer_num: BN;
      comment_num: BN;
      up_and_down: BN;
      upload_timestamp: BN;
    }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
